[{"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/index.js":"1","/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/reportWebVitals.js":"2","/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/App.js":"3","/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/HomePage.js":"4","/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/DemoPage.js":"5","/Users/lianli/Downloads/Robotics /LTL-Web-Demo/Client/src/index.js":"6","/Users/lianli/Downloads/Robotics /LTL-Web-Demo/Client/src/App.js":"7","/Users/lianli/Downloads/Robotics /LTL-Web-Demo/Client/src/reportWebVitals.js":"8","/Users/lianli/Downloads/Robotics /LTL-Web-Demo/Client/src/HomePage.js":"9","/Users/lianli/Downloads/Robotics /LTL-Web-Demo/Client/src/DemoPage.js":"10"},{"size":535,"mtime":1688182208018,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1688182208014,"results":"13","hashOfConfig":"12"},{"size":395,"mtime":1688182208061,"results":"14","hashOfConfig":"12"},{"size":372,"mtime":1688182208054,"results":"15","hashOfConfig":"12"},{"size":2553,"mtime":1688182208057,"results":"16","hashOfConfig":"12"},{"size":535,"mtime":1688182208018,"results":"17","hashOfConfig":"18"},{"size":476,"mtime":1688250165029,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1688182208014,"results":"20","hashOfConfig":"18"},{"size":372,"mtime":1688182208054,"results":"21","hashOfConfig":"18"},{"size":5754,"mtime":1694129154331,"results":"22","hashOfConfig":"18"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1et0d2q",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"udc4iq",{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/index.js",[],[],"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/reportWebVitals.js",[],[],"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/App.js",[],[],"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/HomePage.js",[],[],"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/DemoPage.js",["56","57"],[],"import './DemoPage.css';\nimport { MapContainer, TileLayer } from 'react-leaflet';\nimport { useRef, useState} from 'react';\nimport 'leaflet/dist/leaflet.css';\nimport axios from 'axios'\n\n// Screen where the demo will be hosted\nfunction Demo() {\n  // Calling OSM API\n  const [center, setCenter] = useState({lat: 41.8268, lng: -71.4025})\n  const ZOOM_LEVEL = 16;\n  const mapRef = useRef()\n  const url =  \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n  \n  // When clicked, this will collect the user inpits, get the bounds, parse and filter the location selected\n  const [response, setResponse] = useState(''); // JSON File\n  let userInputValue; // Declare the variable outside the function\n\n  const clickMe =async ()=>{\n\n  // Get use input\n  userInputValue = document.getElementById(\"textInput\").value;\n  // Do something with the userInput value\n  console.log(\"User input: \" + userInputValue);\n\n  if (mapRef.current) {\n      // Get Bounds\n      const map = mapRef.current;\n      const bounds = map.getBounds();\n      const minLat = Number(bounds.getSouth());\n      const maxLat = Number(bounds.getNorth());\n      const minLng = Number(bounds.getWest());\n      const maxLng = Number(bounds.getEast());\n\n      const coord = {minLat, maxLat, minLng, maxLng};\n      console.log(coord)\n      // Call Flask server to call genProp\n      try {\n        const response = await axios.post('http://localhost:5001/genProp', coord);\n        const responseData = response.data;\n        setResponse(responseData); \n        console.log(response)\n\n      } catch (error) {\n        console.error('Error:', error);\n      \n      };\n  }\n}\n\n// Implementing API/Logos\n  return (\n    <div className=\"backround-color\" >\n      <h1 style={{ fontSize: 20, marginLeft: '2in', marginTop: '1in'  }}>\n        Enter Natural Language Command:\n      </h1>\n     \n      <h2 style={{ fontSize: 20, marginLeft: '2in' }}>\n        <input type= \"text\" id=\"textInput\"></input>\n        <button onClick={clickMe}>\n          Convert to LTL\n        </button>\n      </h2>\n\n      <h3 style={{ fontSize: 20, marginLeft: '2in'}}>\n      </h3>\n\n      <h4 style={{ fontSize: 20, marginLeft: '2in'}}>\n         LTL Output:\n        <h2 style={{ fontSize: 20, marginLeft: '0in' }}>\n        <input type= \"text\" id=\"textInput\"></input>\n      </h2>\n      </h4>\n\n      <space>\n      </space>\n    \n      <div>\n        <MapContainer center = {center} zoom= {ZOOM_LEVEL} ref = {mapRef}>\n            <TileLayer \n            url = {url} />\n        </MapContainer>\n      </div>\n   </div>  \n  );\n}\n\nexport default Demo;\n","/Users/lianli/Downloads/Robotics /LTL-Web-Demo/Client/src/index.js",[],[],[],"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/Client/src/App.js",[],[],"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/Client/src/reportWebVitals.js",[],[],"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/Client/src/HomePage.js",[],[],"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/Client/src/DemoPage.js",["58","59","60","61"],[],"import './DemoPage.css';\nimport { MapContainer, TileLayer , Marker, Polyline} from 'react-leaflet';\nimport  L from 'leaflet';\nimport { useEffect, useRef, useState} from 'react';\nimport 'leaflet/dist/leaflet.css';\nimport axios from 'axios'\nimport end from'./img/end.png' ;\nimport middle from './img/middle.png' ;\nimport start from './img/start.png' ;\n\n// Screen where the demo will be hosted\nfunction Demo() {\n  // Getting the OSM API\n  const [center, setCenter] = useState({lat: 41.8268, lng: -71.4025})\n  const ZOOM_LEVEL = 16;\n  const mapRef = useRef()\n  const url =  \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n  \n  // When button is clicked, this will collect the user inputs, get the bounds, parse and filter the location selected\n  const [response, setResponse] = useState(''); // Record genProp output \n  const [userInputValue, setUserInputValue] = useState(''); // set up constant for user input\n  const [ltlServerResponse, setLTLServerResponse] = useState('');\n  const [buttonClicked, setButtonClicked] = useState(false);\n  const [LTLPlannerServerResponse, setLTLPlannerServerResponse] = useState('');\n  const [coordList, setCoordList] = useState([]);\n  const [showMarkers, setShowMarkers] = useState(false);\n\n  // usereffect to update local storage\n  useEffect(() => {\n    const storedOut = JSON.parse(localStorage.getItem('server output')) || [];\n    storedOut.push(ltlServerResponse);\n    localStorage.setItem('server output', JSON.stringify(storedOut));\n\n    const storedIn = JSON.parse(localStorage.getItem('user input')) || [];\n    storedIn.push(userInputValue);\n    localStorage.setItem('user input', JSON.stringify(storedIn));\n  }, [userInputValue, ltlServerResponse]);\n  \n  const clickMe =async ()=>{\n  // Get user input\n  const input = document.getElementById(\"textInput\").value;\n  setUserInputValue(input);\n  if (mapRef.current) {\n      // Get bounds of area displayed on the OSM map\n      const map = mapRef.current;\n      const bounds = map.getBounds();\n      const minLat = Number(bounds.getSouth());\n      const maxLat = Number(bounds.getNorth());\n      const minLng = Number(bounds.getWest());\n      const maxLng = Number(bounds.getEast());\n\n      const coord = {minLat, maxLat, minLng, maxLng};\n      console.log(coord)\n      // Call servers required when button is clicked\n      try {\n         // Call genProp server to call genProp()\n        const response = await axios.post('http://localhost:5001/genProp', coord);\n        const responseData = response.data;\n        setResponse(responseData); \n\n         // Use the JSON file obtained in the first API call\n        const jsonFile = JSON.stringify(responseData);\n        console.log(responseData)\n        // LTLServer to call convertLTL(), passes in user input and JSON file of Propositions\n        const response2 = await axios.post('http://localhost:5004/convertLTL',  { input: userInputValue, file: jsonFile});\n        const responseData2 = response2.data;\n        setLTLServerResponse(responseData2);\n        console.log(responseData2);\n        // LTLPlannerServer called to get route sequence \n        const response3 = await axios.post('http://localhost:5003/routeSeq',  {LTLStatement: responseData2, file: jsonFile, minLat: \n        minLat, maxLat: maxLat, minLng:minLng, maxLng: maxLng});\n        const responseData3 = response3.data;\n        setLTLPlannerServerResponse(responseData3);\n        setCoordList(responseData3);\n        console.log(responseData3);\n        setShowMarkers(true);\n\n      } catch (error) {\n        if (error.config.url === 'http://localhost:5002/convertLTL') {\n          console.log(\"Error from convertLTL:\", error.response.data.error); // Log the error message\n        }\n        console.error('Error:', error);\n      \n      };\n      setButtonClicked(true)\n  }\n}\n\n// Creating custom marker for Map\nconst startMark = L.icon({\n  iconUrl: start,\n  iconSize: [32, 32], // Adjust the size of the icon as needed\n  iconAnchor: [16, 32],\n});\n\nconst endMark =\nL.icon({\n  iconUrl: end,\n  iconSize: [32, 32], // Adjust the size of the icon as needed\n  iconAnchor: [16, 32],\n});\n\nconst middleMark =\nL.icon({\n  iconUrl: middle,\n  iconSize: [32, 32], // Adjust the size of the icon as needed\n  iconAnchor: [16, 32],\n});\n\n\n// Implementing OSM API and creating demo page components \n  return (\n    <div className=\"backround-color\" >\n      <h1 style={{ fontSize: 20, marginLeft: '2in', marginTop: '1in'  }}>\n        Enter Natural Language Command:\n      </h1>\n     \n      <h2 style={{ fontSize: 20, marginLeft: '2in' }}>\n        <input type= \"text\" id=\"textInput\"></input>\n        <button onClick={clickMe}>\n          Convert to LTL\n        </button>\n      </h2>\n\n      <h3 style={{ fontSize: 20, marginLeft: '2in'}}>\n      </h3>\n\n      <h4 style={{ fontSize: 20, marginLeft: '2in'}}>\n         LTL Output:\n      </h4>\n      <h2 style={{ fontSize: 20, marginLeft: '2in' }}>\n        {ltlServerResponse}\n      </h2>\n      <space>\n      </space>\n    \n      <div>\n        <MapContainer center = {center} zoom= {ZOOM_LEVEL} ref = {mapRef}>\n            <TileLayer \n            url = {url} />\n           {showMarkers && coordList.length > 0 && (\n            <>\n              <Marker position={coordList[0]} icon={startMark} />\n              <Marker\n                position={coordList[coordList.length - 1]}\n                icon={endMark}\n              />\n              {coordList.map((coord, index) =>\n                index !== 0 && index !== coordList.length - 1 ? (\n                  <Marker key={index} position={coord} icon={middleMark} />\n                ) : null\n              )}\n              <Polyline positions={coordList} color=\"black\" />\n            </>\n          )}\n        </MapContainer>\n      </div>\n   </div>  \n  );\n}\n\nexport default Demo;\n",{"ruleId":"62","severity":1,"message":"63","line":10,"column":18,"nodeType":"64","messageId":"65","endLine":10,"endColumn":27},{"ruleId":"62","severity":1,"message":"66","line":16,"column":10,"nodeType":"64","messageId":"65","endLine":16,"endColumn":18},{"ruleId":"62","severity":1,"message":"63","line":14,"column":18,"nodeType":"64","messageId":"65","endLine":14,"endColumn":27},{"ruleId":"62","severity":1,"message":"66","line":20,"column":10,"nodeType":"64","messageId":"65","endLine":20,"endColumn":18},{"ruleId":"62","severity":1,"message":"67","line":23,"column":10,"nodeType":"64","messageId":"65","endLine":23,"endColumn":23},{"ruleId":"62","severity":1,"message":"68","line":24,"column":10,"nodeType":"64","messageId":"65","endLine":24,"endColumn":34},"no-unused-vars","'setCenter' is assigned a value but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","'buttonClicked' is assigned a value but never used.","'LTLPlannerServerResponse' is assigned a value but never used."]