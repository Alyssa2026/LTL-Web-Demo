[{"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/index.js":"1","/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/reportWebVitals.js":"2","/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/App.js":"3","/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/HomePage.js":"4","/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/DemoPage.js":"5"},{"size":535,"mtime":1688182208018,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1688182208014,"results":"8","hashOfConfig":"7"},{"size":395,"mtime":1688182208061,"results":"9","hashOfConfig":"7"},{"size":372,"mtime":1688182208054,"results":"10","hashOfConfig":"7"},{"size":2553,"mtime":1688182208057,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1et0d2q",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/index.js",[],[],"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/reportWebVitals.js",[],[],"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/App.js",[],[],"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/HomePage.js",[],[],"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/client/src/DemoPage.js",["28","29"],[],"import './DemoPage.css';\nimport { MapContainer, TileLayer } from 'react-leaflet';\nimport { useRef, useState} from 'react';\nimport 'leaflet/dist/leaflet.css';\nimport axios from 'axios'\n\n// Screen where the demo will be hosted\nfunction Demo() {\n  // Calling OSM API\n  const [center, setCenter] = useState({lat: 41.8268, lng: -71.4025})\n  const ZOOM_LEVEL = 16;\n  const mapRef = useRef()\n  const url =  \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n  \n  // When clicked, this will collect the user inpits, get the bounds, parse and filter the location selected\n  const [response, setResponse] = useState(''); // JSON File\n  let userInputValue; // Declare the variable outside the function\n\n  const clickMe =async ()=>{\n\n  // Get use input\n  userInputValue = document.getElementById(\"textInput\").value;\n  // Do something with the userInput value\n  console.log(\"User input: \" + userInputValue);\n\n  if (mapRef.current) {\n      // Get Bounds\n      const map = mapRef.current;\n      const bounds = map.getBounds();\n      const minLat = Number(bounds.getSouth());\n      const maxLat = Number(bounds.getNorth());\n      const minLng = Number(bounds.getWest());\n      const maxLng = Number(bounds.getEast());\n\n      const coord = {minLat, maxLat, minLng, maxLng};\n      console.log(coord)\n      // Call Flask server to call genProp\n      try {\n        const response = await axios.post('http://localhost:5001/genProp', coord);\n        const responseData = response.data;\n        setResponse(responseData); \n        console.log(response)\n\n      } catch (error) {\n        console.error('Error:', error);\n      \n      };\n  }\n}\n\n// Implementing API/Logos\n  return (\n    <div className=\"backround-color\" >\n      <h1 style={{ fontSize: 20, marginLeft: '2in', marginTop: '1in'  }}>\n        Enter Natural Language Command:\n      </h1>\n     \n      <h2 style={{ fontSize: 20, marginLeft: '2in' }}>\n        <input type= \"text\" id=\"textInput\"></input>\n        <button onClick={clickMe}>\n          Convert to LTL\n        </button>\n      </h2>\n\n      <h3 style={{ fontSize: 20, marginLeft: '2in'}}>\n      </h3>\n\n      <h4 style={{ fontSize: 20, marginLeft: '2in'}}>\n         LTL Output:\n        <h2 style={{ fontSize: 20, marginLeft: '0in' }}>\n        <input type= \"text\" id=\"textInput\"></input>\n      </h2>\n      </h4>\n\n      <space>\n      </space>\n    \n      <div>\n        <MapContainer center = {center} zoom= {ZOOM_LEVEL} ref = {mapRef}>\n            <TileLayer \n            url = {url} />\n        </MapContainer>\n      </div>\n   </div>  \n  );\n}\n\nexport default Demo;\n",{"ruleId":"30","severity":1,"message":"31","line":10,"column":18,"nodeType":"32","messageId":"33","endLine":10,"endColumn":27},{"ruleId":"30","severity":1,"message":"34","line":16,"column":10,"nodeType":"32","messageId":"33","endLine":16,"endColumn":18},"no-unused-vars","'setCenter' is assigned a value but never used.","Identifier","unusedVar","'response' is assigned a value but never used."]