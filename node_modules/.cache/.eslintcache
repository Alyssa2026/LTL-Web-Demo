[{"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/src/index.js":"1","/Users/lianli/Downloads/Robotics /LTL-Web-Demo/src/reportWebVitals.js":"2","/Users/lianli/Downloads/Robotics /LTL-Web-Demo/src/App.js":"3","/Users/lianli/Downloads/Robotics /LTL-Web-Demo/src/App.test.js":"4","/Users/lianli/Downloads/Robotics /LTL-Web-Demo/src/HomePage.js":"5","/Users/lianli/Downloads/Robotics /LTL-Web-Demo/src/DemoPage.js":"6"},{"size":535,"mtime":1687026559814,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1686698804522,"results":"9","hashOfConfig":"8"},{"size":395,"mtime":1686717481316,"results":"10","hashOfConfig":"8"},{"size":246,"mtime":1686698804522,"results":"11","hashOfConfig":"8"},{"size":372,"mtime":1686806497681,"results":"12","hashOfConfig":"8"},{"size":2113,"mtime":1687037517053,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"154vx98",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/src/index.js",[],[],[],"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/src/reportWebVitals.js",[],[],"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/src/App.js",[],[],"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/src/App.test.js",[],[],"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/src/HomePage.js",[],[],"/Users/lianli/Downloads/Robotics /LTL-Web-Demo/src/DemoPage.js",["34","35"],[],"import './DemoPage.css';\nimport { MapContainer, TileLayer } from 'react-leaflet';\nimport { useState } from 'react';\nimport { useRef, useEffect } from 'react';\nimport 'leaflet/dist/leaflet.css';\n\n\n// Screen where the demo will be hosted\nfunction Demo() {\n  // Calling OSM API\n  const [center, setCenter] = useState({lat: 41.8268, lng: -71.4025})\n  const ZOOM_LEVEL = 16;\n  const mapRef = useRef()\n  const url =  \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n  // When clicked, this will get the bounds, parse and filter the location selected\n  const clickMe =async ()=>{\n  if (mapRef.current) {\n    // Get Bounds\n    const map = mapRef.current;\n    const bounds = map.getBounds();\n    const minLat = Number(bounds.getSouth().toFixed(2));\n    const maxLat = Number(bounds.getNorth().toFixed(2));\n    const minLng = Number(bounds.getWest().toFixed(2));\n    const maxLng = Number(bounds.getEast().toFixed(2));\n\n    // Call Flask server to call genProp\n    const coord = {minLat, maxLat, minLng, maxLng};\n   \n    const response = await fetch(\"/genProp\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(coord)\n    });\n    if (response.ok) {\n      console.log(\"response worked!\");\n      \n    }\n      \n  }\n}\n// Implementing API/Logos\n  return (\n    <div className=\"backround-color\" >\n      <h1 style={{ fontSize: 20, marginLeft: '2in', marginTop: '1in'  }}>\n        Enter Natural Language Command:\n      </h1>\n     \n      <h2 style={{ fontSize: 20, marginLeft: '2in' }}>\n        <input type= \"text\"></input>\n        <button onClick={clickMe}>\n          Convert to LTL\n        </button>\n      </h2>\n\n      <h3 style={{ fontSize: 20, marginLeft: '2in'}}>\n        LTL Output: \n      </h3>\n\n      <h4 style={{ fontSize: 20, marginLeft: '2in'}}>\n        <input type= \"text\"></input>\n      </h4>\n\n      <space>\n      </space>\n    \n      <div>\n        <MapContainer center = {center} zoom= {ZOOM_LEVEL} ref = {mapRef}>\n            <TileLayer \n            url = {url} />\n        </MapContainer>\n      </div>\n   </div>  \n  );\n}\n\nexport default Demo;\n",{"ruleId":"36","severity":1,"message":"37","line":4,"column":18,"nodeType":"38","messageId":"39","endLine":4,"endColumn":27},{"ruleId":"36","severity":1,"message":"40","line":11,"column":18,"nodeType":"38","messageId":"39","endLine":11,"endColumn":27},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setCenter' is assigned a value but never used."]